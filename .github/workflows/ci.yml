
name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-api:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('apps/api/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd apps/api
        python -m pip install --upgrade pip
        pip install -r requirements.txt -r requirements-dev.txt
    
    - name: Run API tests
      run: |
        cd apps/api
        python -m pytest tests/ -v --tb=short
    
    - name: Run API linting
      run: |
        cd apps/api
        python -m flake8 app/ --max-line-length=100 --ignore=E203,W503
        python -m black --check app/ --line-length=100
        python -m isort --check-only app/ --profile=black --line-length=100

  test-web:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: apps/admin_web/package-lock.json
    
    - name: Install dependencies
      run: |
        cd apps/admin_web
        npm ci
    
    - name: Run web tests
      run: |
        cd apps/admin_web
        npm run test --if-present
    
    - name: Run web linting
      run: |
        cd apps/admin_web
        npm run lint --if-present

  test-mobile:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.19.0'
        channel: 'stable'
    
    - name: Install dependencies
      run: |
        cd apps/mobile
        flutter pub get
    
    - name: Run mobile tests
      run: |
        cd apps/mobile
        flutter test
    
    - name: Run mobile analysis
      run: |
        cd apps/mobile
        flutter analyze

  integration-test:
    runs-on: ubuntu-latest
    needs: [test-api, test-web, test-mobile]
    
    services:
      neo4j:
        image: neo4j:5.20
        env:
          NEO4J_AUTH: neo4j/password
          NEO4J_server_config_strict__validation_enabled: false
        options: >-
          --health-cmd "cypher-shell -u neo4j -p password 'RETURN 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 7474:7474
          - 7687:7687
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd apps/api
        python -m pip install --upgrade pip
        pip install -r requirements.txt -r requirements-dev.txt
    
    - name: Wait for Neo4j
      run: |
        timeout 60 bash -c 'until cypher-shell -u neo4j -p password -a neo4j://localhost:7687 "RETURN 1"; do sleep 2; done'
    
    - name: Initialize Neo4j schema
      run: |
        cd apps/api
        python -c "
        from neo4j import GraphDatabase
        driver = GraphDatabase.driver('neo4j://localhost:7687', auth=('neo4j', 'password'))
        with driver.session() as session:
            session.run('CREATE CONSTRAINT doc_id IF NOT EXISTS FOR (d:Doc) REQUIRE d.id IS UNIQUE')
            session.run('CREATE VECTOR INDEX docEmbeddings IF NOT EXISTS FOR (d:Doc) ON (d.embedding) OPTIONS {indexConfig: { `vector.dimensions`: 1536, `vector.similarity_function`: \"cosine\" }}')
        driver.close()
        "
    
    - name: Run integration tests
      env:
        NEO4J_URI: neo4j://localhost:7687
        NEO4J_USER: neo4j
        NEO4J_PASSWORD: password
        BYPASS_AUTH: true
        USE_LOCAL_MOCK: true
        LOCAL_EMBEDDINGS: true
      run: |
        cd apps/api
        python -m pytest tests/test_integration.py -v -m integration

  security-scan:
    runs-on: ubuntu-latest
    needs: [test-api, test-web, test-mobile]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security scan
      uses: github/codeql-action/init@v2
      with:
        languages: python, javascript
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  build-docker:
    runs-on: ubuntu-latest
    needs: [test-api, test-web, test-mobile]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and cache Docker images
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile.api
        push: false
        tags: living-twin-api:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
