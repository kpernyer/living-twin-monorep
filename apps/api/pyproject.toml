[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "living-twin-api"
version = "0.1.0"
description = "Living Twin RAG API with multi-tenant support"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Living Twin Team"},
]
keywords = ["rag", "ai", "fastapi", "neo4j", "firebase"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

dependencies = [
    "fastapi>=0.111.0",
    "uvicorn[standard]>=0.30.1",
    "pydantic>=2.7.1",
    "pydantic-settings>=2.2.1",
    "python-multipart>=0.0.9",
    "neo4j>=5.20.0",
    "openai>=1.3.0",
    "langchain>=0.2.3",
    "langchain-community>=0.2.4",
    "langchain-openai>=0.1.8",
    "tiktoken>=0.7.0",
    "numpy>=1.26.4",
    "sentence-transformers>=2.7.0",
    "firebase-admin>=6.4.0",
    "google-cloud-firestore>=2.13.0",
    "google-cloud-storage>=2.10.0",
    "google-cloud-pubsub>=2.18.0",
    "httpx>=0.27.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-dotenv>=1.0.1",
    "structlog>=23.2.0",
    "rich>=13.7.0",
    "PyPDF2>=3.0.1",
    "python-docx>=1.1.2",
    "gunicorn>=22.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.2.1",
    "pytest-asyncio>=0.23.7",
    "pytest-cov>=4.1.0",
    "black>=24.4.2",
    "isort>=5.13.0",
    "flake8>=7.0.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
]

[project.urls]
Homepage = "https://github.com/your-org/living-twin"
Repository = "https://github.com/your-org/living-twin.git"
Issues = "https://github.com/your-org/living-twin/issues"

[tool.hatch.build.targets.wheel]
packages = ["app"]

[tool.black]
line-length = 100
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    ".mypy_cache",
    ".pytest_cache",
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "firebase_admin.*",
    "google.*",
    "neo4j.*",
    "openai.*",
    "sentence_transformers.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
